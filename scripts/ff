#!/usr/bin/env python3

import sys
import subprocess
import json


def rust_docs(query):
    if len(query) > 0:
        return f"https://docs.rs/{query[0]}/latest"
    else:
        return "https://docs.rs/"

def bevy(query):
    if len(query) > 0:
        search_term = "+".join(query)
        return f"https://docs.rs/bevy/latest/bevy/?search={search_term}"
    else:
        return "https://docs.rs/bevy/latest/bevy"
local_bangs = {
    "!oni": "https://oxygennotincluded.wiki.gg/index.php?search=",
    "!docs": rust_docs,
    "!bevy": bevy,
}

class ParsedArgs:
    def __init__(self, bang, search):
        self.bang = bang
        self.search = search

def parse_arguments(args):
    bang = None
    search = []
    for arg in args:
        if arg.startswith("!") and bang is None:
            bang = arg
        else:
            search.append(arg)
    return ParsedArgs(bang, search)

def search_local_bangs(parsed_args):
    if parsed_args.bang in local_bangs:
        data = local_bangs[parsed_args.bang]
        if isinstance(data, str):
            base_url = data
            query = "+".join(parsed_args.search)
            final_url = f"{base_url}{query}"
            print(final_url)
        else:
            print(parsed_args.search, data)
            final_url = data(parsed_args.search)
        print(final_url)
        return final_url
    return None

def search_duckduckgo(parsed_args):
    query = parsed_args.bang + " " + " ".join(parsed_args.search) if parsed_args.bang else " ".join(parsed_args.search)
    query = query.replace(" ", "+")
    return f"https://duckduckgo.com/?q={query}"

def open_bookmarks_as_json(bookmarks_file, parsed_args):
    try:
        with open(bookmarks_file, "r") as f:
            bookmarks_str = f.read()
        bookmarks = json.loads(bookmarks_str)
    except json.JSONDecodeError:
        subprocess.run(["notify-send", "Error", f"{bookmarks_file} couldn't be parsed (missing comma ?)"])
        sys.exit(1)
    except FileNotFoundError:
        subprocess.run(["notify-send", "Error", f"{bookmarks_file} file not found"])
        sys.exit(1)
    except Exception as e:
        subprocess.run(["notify-send", "Error", f"An error occurred: {e}"])
        sys.exit(1)
    
    if parsed_args.search[0] in bookmarks:
        return bookmarks[parsed_args.search[0]]
    else:
        return None

web_bookmarks_path = "/home/maxwell/bin/web_bookmarks.json" # Path to bookmarks file 

def main():
    if len(sys.argv) == 1:
        subprocess.run(["firefox", "-new-tab"])
        return
    
    parsed_args = parse_arguments(sys.argv[1:])
    
    # Check for single bang "!" to open Firefox in a new window
    if parsed_args.bang == "!":
        subprocess.run(["firefox"])
        return
    
    url = None
    if parsed_args.bang is not None:
        url = search_local_bangs(parsed_args)
    
    # If no local bang is found, proceed to search DuckDuckGo
    if url is None:
        if parsed_args.bang:
            url = search_duckduckgo(parsed_args)
        else:
            url = open_bookmarks_as_json(web_bookmarks_path, parsed_args)
    
    if url is None:
        url = search_duckduckgo(parsed_args)
    
    subprocess.run(["firefox", "-new-tab", url])

if __name__ == "__main__":
    main()
