#!/bin/bash
[ -z "$TSP_YTDLP" ] && echo "Should be called by tsp_ytdlp, not intended to be called standalone - just use yt-dlp on its own, e.g. yt-dlp $1" && exit 1
RETRY_DELAY=30
LOG_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/dotfiles"
LOG_FILE="$LOG_DIR/tsp_ytdlp.log"
url="$1"
video_path="$2"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

update_progress() {
    local url_and_path="$1"
    local progress="$2"
    # Update the tsp label with progress info
    tsp -L "yt-dlp: $url_and_path ($progress)" -i "$TSP_JOBID" >/dev/null 2>&1
}

log "Starting download of $url to $video_path"
while true; do
    # Run yt-dlp and capture output through a pipe to parse progress
    yt-dlp -o "$video_path" "$url" 2>&1 | while read -r line; do
    if echo "$line" | grep -q "\[download\].*%.*of"; then
        progress=$(echo "$line" | grep -o "[0-9]\+\.[0-9]\+%" | head -1)
        speed=$(echo "$line" | grep -o "[0-9]\+\.[0-9]\+[KMG]iB/s" | head -1)
        eta=$(echo "$line" | grep -o "ETA [0-9:]\+" | sed 's/ETA //')
        update_progress "$url -> $video_path" "$progress ($speed, ETA: $eta)"
    fi
done

        # Check if download was successful
        if [ "${PIPESTATUS[0]}" -eq 0 ]; then
            break
        else
            log "Download failed for $url - retrying in ${RETRY_DELAY}s"
            update_progress "$url" "retry in ${RETRY_DELAY}s"
            sleep $RETRY_DELAY
        fi
    done
    log "Download completed successfully: $url -> $video_path"
    update_progress "$url -> $video_path" "COMPLETED"

