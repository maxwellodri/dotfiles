#!/bin/bash
[ -z "$1" ] && ( echo "No url provided"; exit 1)
[ -z "$LOG_DIR" ] && LOG_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/dotfiles"
[ -z "$LOG_FILE" ] && LOG_FILE="$LOG_DIR/tsp_ytdlp.log"
[ -z "$FAILURE_LOG" ] && FAILURE_LOG="$LOG_DIR/tsp_ytdlp.failure.log"
[ -z "$VIDEO_DIR" ] && VIDEO_DIR="$HOME/Videos/youtube"
VIDEO_PATH_TEMPLATE="$VIDEO_DIR/%(title)s-%(id)s.%(ext)s"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

mkdir -p "$LOG_DIR"
url="$1"

if ! full_path=$(yt-dlp --print filename --restrict-filename "$url" -o "$VIDEO_PATH_TEMPLATE"); then
    log "Failed to get filename for $url"
    exit 1
fi

base_path=${full_path%.*}
filename=$(basename "$base_path")
log "Downloading $url to $base_path.*"

# Use yt-dlp's built-in retry mechanisms instead of manual loop
output_file=$(mktemp)
if yt-dlp \
    --write-info-json \
    --embed-metadata \
    --xattrs \
    --sponsorblock-remove sponsor \
    --sponsorblock-mark intro,outro,selfpromo,preview \
    --restrict-filename \
    --trim-filenames 200 \
    --retries infinite \
    --fragment-retries infinite \
    --file-access-retries infinite \
    --extractor-retries infinite \
    --retry-sleep linear=1:120:2 \
    -o "${base_path}.%(ext)s" \
    "$url" > "$output_file" 2>&1; then
    
    # Find the actual downloaded file
    actual_file=$(find "$(dirname "$base_path")" -type f -name "$(basename "$base_path").*" | grep -v '\.info\.json$' | head -1)
    
    if [ -n "$actual_file" ]; then
        filename=$(basename "$actual_file")
        # Clean up metadata file after successful embed
        rm -f "${actual_file%.*}.info.json"
        log "Download completed successfully: $url -> $actual_file"
        notify-send -t 5000 "Download completed: $filename ðŸ¤—âœ…"
    else
        failure_msg="Download reported success but no file found for $url"
        log "$failure_msg"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $failure_msg" >> "$FAILURE_LOG"
        cat "$output_file" >> "$LOG_FILE"
        rm -f "$output_file"
        exit 1
    fi
else
    failure_msg="Download failed permanently for $url"
    log "$failure_msg"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $failure_msg" >> "$FAILURE_LOG"
    cat "$output_file" >> "$LOG_FILE"
    rm -f "$output_file"
    exit 1
fi

rm -f "$output_file"
