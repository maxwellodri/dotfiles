#!/bin/bash
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
CACHE_DIR="$XDG_CACHE_HOME/dotfiles"
LOG_FILE="$CACHE_DIR/dockerup.log"
UPDATE_FILE="$CACHE_DIR/dockerup.update"
DIUN_CONFIG="/etc/diun/diun.yml"

# Function to log messages (only if verbose mode is enabled)
log_message() {
    if [ "$VERBOSE" = true ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
    fi
}

LOCK_FILE="/tmp/dockerup.lock"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
if [ -e "$XDG_CONFIG_HOME/sh/shrc" ]; then
    source "$XDG_CONFIG_HOME/sh/shrc"
else
    echo "Error: Required configuration file not found: $XDG_CONFIG_HOME/sh/shrc"
    exit 1
fi

if [ -e "$LOCK_FILE" ]; then
    PID=$(cat "$LOCK_FILE")
    if ps -p "$PID" > /dev/null 2>&1; then
        log_message "Another instance is already running (PID: $PID). Exiting."
        exit 0
    else
        log_message "Removing stale lock file."
        rm -f "$LOCK_FILE"
    fi
fi
echo $$ > "$LOCK_FILE"

trap 'rm -f "$LOCK_FILE"' EXIT

# Ensure cache directory exists
mkdir -p "$CACHE_DIR"

# Test Docker connectivity
if ! docker info >/dev/null 2>&1; then
    log_message "ERROR: Cannot connect to Docker. Check permissions or Docker service."
    exit 1
fi

if [ "$(id -u)" -eq 0 ] || groups | grep -q '\bdocker\b'; then
    log_message "$USER has docker permissions"
else
    log_message "User: $USER, doesn't have Docker permissions"
    exit 1  
fi


# Check internet connectivity (fail silently if no connection)
check_internet() {
    # Try to connect to Docker Hub with a 5 second timeout
    if curl --silent --connect-timeout 5 https://registry-1.docker.io >/dev/null 2>&1; then
        return 0  # Internet is available
    else
        return 1  # No internet connection
    fi
}

# Check if Diun is installed
if ! command -v diun &> /dev/null; then
    log_message "ERROR: Diun is not installed. Please install it first."
    exit 1
fi

# Create or update Diun configuration if it doesn't exist
if [ ! -f "$DIUN_CONFIG" ]; then
    log_message "Creating default Diun configuration..."
    mkdir -p "$(dirname "$DIUN_CONFIG")"

    cat > "$DIUN_CONFIG" << EOL
    db:
    path: /var/lib/diun/diun.db

    watch:
    schedule: "0 */6 * * *"  # Check every 6 hours
    disabled: true # Disable automatic watching - we'll use our cronjob instead

    providers:
    docker:
    watchByDefault: true

    notif:
    script:
    cmd: "$(readlink -f "$0")"
    args:
    - "--notification-only"
EOL

    log_message "Created default Diun configuration at $DIUN_CONFIG"
    log_message "IMPORTANT: Please review and customize the Diun configuration file!"
fi

# Handle notifications from Diun when run in notification mode
if [ "$1" == "--notification-only" ]; then
    # Read notification data from stdin (sent by Diun)
    read -r NOTIFICATION_DATA

    # Extract relevant information
    IMAGE_NAME=$(echo "$NOTIFICATION_DATA" | jq -r '.image')
    CURRENT_TAG=$(echo "$NOTIFICATION_DATA" | jq -r '.current_tags[0]')
    NEW_TAG=$(echo "$NOTIFICATION_DATA" | jq -r '.new_tags[0]')

    # Add to the update file, ensuring one line per container
    echo "$IMAGE_NAME (Current: $CURRENT_TAG → New: $NEW_TAG)" >> "$UPDATE_FILE"

    # Also log to the regular log file
    echo "$(date '+%Y-%m-%d %H:%M:%S') - UPDATE AVAILABLE: $IMAGE_NAME - Current: $CURRENT_TAG, New: $NEW_TAG" >> "$LOG_FILE"
    exit 0
fi

# Check for verbose mode
VERBOSE=true
if [ "$1" == "--quiet" ]; then
    VERBOSE=false
fi

# Main function to check for Docker image updates
check_for_updates() {
    log_message "Starting Docker image update check..."

    # Check internet connectivity first
    if ! check_internet; then
        log_message "No internet connectivity. Skipping update check."
        return 0  # Exit silently
    fi

    # Create a fresh temp file for current check
    TEMP_FILE=$(mktemp)

    # Create a fresh temp update file
    TEMP_UPDATE_FILE=$(mktemp)

    # Get list of running containers
    CONTAINERS=$(docker ps --format '{{.Image}}')

    # Check if any containers are running
    if [ -z "$CONTAINERS" ]; then
        log_message "No running containers found."
        rm "$TEMP_FILE" "$TEMP_UPDATE_FILE"
        return
    fi

    # Run Diun in analyze mode to check for updates
    diun analyze --config "$DIUN_CONFIG" 2>&1 | tee "$TEMP_FILE" >/dev/null 2>&1

    # Process the output to create a structured update list
    if grep -q "found new tag" "$TEMP_FILE"; then
        log_message "Updates found. Writing to update file..."

        # Extract update information
        grep "found new tag" "$TEMP_FILE" | while read -r line; do
        # Parse image name and tags
        IMAGE=$(echo "$line" | sed -E 's/.*image (.*) found new tag.*/\1/')
        NEW_TAG=$(echo "$line" | sed -E 's/.*new tag (.*) \(current: (.*)\).*/\1/')
        CURRENT_TAG=$(echo "$line" | sed -E 's/.*new tag (.*) \(current: (.*)\).*/\2/')

        # Write to temp update file (one line per container)
        echo "$IMAGE (Current: $CURRENT_TAG → New: $NEW_TAG)" >> "$TEMP_UPDATE_FILE"

        # Write to regular log file
        echo "$(date '+%Y-%m-%d %H:%M:%S') - UPDATE AVAILABLE: $IMAGE - Current: $CURRENT_TAG, New: $NEW_TAG" >> "$LOG_FILE"
    done

    # Replace the update file with our new findings
    mv "$TEMP_UPDATE_FILE" "$UPDATE_FILE"
else
    log_message "No updates found for running containers."
    cat /dev/null > filename # Clear the update file since there are no updates
    fi

    # Clean up
    rm -f "$TEMP_FILE" 2>/dev/null
    rm -f "$TEMP_UPDATE_FILE" 2>/dev/null
}

# Main execution
log_message "==== Docker Update Monitor Started ===="

# Make sure the files exist
touch "$LOG_FILE"
touch "$UPDATE_FILE"

# Run the update check
check_for_updates

log_message "==== Docker Update Monitor Completed ===="

exit 0
